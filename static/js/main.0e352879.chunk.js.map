{"version":3,"sources":["logo.svg","mazeAlgorithms/recursive_division.js","PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","algorithms/bfs.js","algorithms/dfs.js","mazeAlgorithms/random_weight.js","algorithms/bidirectional_bfs.js","modall/modall.jsx","PathfindingVisualizer/sample.jsx","PathfindingVisualizer/PathfindingVisualizer.jsx","mazeAlgorithms/stair_pattern.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","wid","Node","this","props","col","isFinish","isStart","isWall","isWeight","onKeyDown","onKeyUp","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","tabIndex","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","closestNode","getclosestNode","Infinity","isVisited","updateUnvisitedNeighbors","topNode","mindist","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","cost","previousNode","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","astar","fx","fy","dis","Math","abs","que","dfs","dfs_util","random_weights","width","height","min","max","mazeNodesInOrder","i","j","floor","random","randomIntFromInterval","recursive_divide","set1","Set","add","divide","x","y","console","log","orientation","choose_orientation","horizontal","wx","wy","has","px","py","dx","dy","nx","ny","w","h","updateUnvisitedNeighbors1","getUnvisitedNeighbors1","istargetNode","tmpnode","prevNode2","updateUnvisitedNeighbors2","getUnvisitedNeighbors2","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","state","mouseIsPressed","isW","show","setShow","currentAlgoNo","currentAlgoName","isdisable","clearflag","clearBoard","bind","visualizeDijkstra","handleClose","handleShow","getInitialGrid","setState","fl","newGrid","getNewGridWithWallToggled","handleMove","colorShortestPath","document","getElementById","setTimeout","animateShortestPath","nodesInMaze","flag","gridd","clearPath","animateAlgo","colorAlgo","shift","bfs","que1","que2","closestNode1","closestNode2","bidirectional_bfs","midnode","Shortest_Bidirectional_Bfs_PathOrder","clearWallsWeights","animateMazeWalls","animateRandomMaze","stair_pattern","visualizeAstar","visualizeBfs","visualizeDfs","visualizeBiderectional_bfs","disabled","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","Toggle","aria-controls","Collapse","Nav","NavDropdown","title","Item","onClick","visualizeRecursive_division","visualizeWall_maze","visualizeWeight_maze","visualizeStair_maze","Link","handleVisulize","map","rowIdx","key","nodeIdx","handleKeyPress","handleKeyUp","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e352879.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","\nlet wid,hig;\n\nfunction choose_orientation(width, height){\n\n  //let t=randomIntFromInterval(0,1);\n  //console.log(t);\n  //return t;\n\n  if(width < height)\n  {  return 1;  }\n  else if(height < width)\n  {  return 0;  }\n  else\n  { return randomIntFromInterval(0,1);  }\n\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function recursive_divide(width, height)\n{\n  const set1= new Set();\n  const mazeNodesInOrder=[]; \n  wid=width; hig=height;\n  for(let i=0; i<width; i++){ mazeNodesInOrder.push([0,i]); set1.add((wid*0)+i); }\n  for(let i=0; i<height; i++){ mazeNodesInOrder.push([i,0]); mazeNodesInOrder.push([i,width-1]);  set1.add((wid*i)+0); set1.add((wid*i)+width-1);}\n  for(let i=0; i<width; i++){ mazeNodesInOrder.push([height-1,i]); set1.add((wid*(height-1))+i); }\n\n  divide(mazeNodesInOrder,set1,1,1,width-2,height-2);\n  return mazeNodesInOrder;\n}\n\n \n// --------------------------------------------------------------------\n// 4. The recursive-division algorithm itself\n// --------------------------------------------------------------------\n\nfunction divide(grid,set1, x, y, width, height){\n\n  if( width < 2 || height < 2){ return; } \n  if( width === 2 && height === 2){ return; } \n\n  console.log(wid);\n\n  let orientation=choose_orientation(width,height);\n  const horizontal = orientation;\n\n  if(width===2){ orientation=1; }\n  else if(height===2){ orientation=0; }\n\n  // where will the wall be drawn from?\n  let wx = x + (horizontal ? 0 : randomIntFromInterval(1,width-2));\n  let wy = y + (horizontal ? randomIntFromInterval(1,height-2) : 0);\n\n  if(horizontal){\n   if(wx-1>=0 && set1.has((wy*wid)+wx-1) === false )\n   {\n    if(wy-1 > y){  wy-=1; }\n    else if(wy+1 < y+height-1){ wy+=1; } \n    else{ return; }\n   }\n  }\n  else{\n   if(wy-1>=0 && set1.has((wy-1)*wid + wx) === false )\n   {\n    if(wx-1>x){  wx-=1; }\n    else if(wx+1 < x+width-1){ wx+=1; } \n    else{ return; }\n   }\n  }\n\n  // where will the passage through the wall exist?\n  let px = wx + (horizontal ? randomIntFromInterval(0,width-1) : 0);\n  let py = wy + (horizontal ? 0 : randomIntFromInterval(0,height-1));\n\n  if(horizontal && !set1.has((wy*wid)+wx+width) ) { px=wx+(width-1); }\n  else if(!horizontal && !set1.has( ((wy+height)*wid)+wx)  ){ py=wy+(height-1); }\n\n  // what direction will the wall be drawn?\n  let dx = horizontal ? 1 : 0;\n  let dy = horizontal ? 0 : 1;\n\n  // how long will the wall be?\n  let length = horizontal ? width : height;\n\n  // what direction is perpendicular to the wall?\n  // dir = horizontal ? S : E\n\n  for(let i=0; i<length; i++){\n    if( (wx !== px || wy !== py) )\n    { grid.push([wy,wx]); set1.add((wid*wy)+wx); }\n    wx += dx;\n    wy += dy;\n  }\n\n  let nx=x,ny= y; //console.log(ny,nx,\"1\");\n  let [w,h]= horizontal ? [width, wy-y] : [wx-x, height];\n  divide(grid,set1, nx, ny, w, h);\n\n  [nx,ny] = horizontal ? [x, wy+1] : [wx+1, y];\n  //console.log(ny,nx,\"2\");\n  [w,h] = horizontal ? [width, y+height-wy-1] : [x+width-wx-1, height];\n  divide(grid,set1, nx, ny, w, h);\n  \n}\n","import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n\n\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      isWeight,\n      onKeyDown,\n      onKeyUp,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : isWeight\n      ? 'node-weight'\n      : ''; \n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onKeyDown={onKeyDown}\n        onKeyUp={onKeyUp} \n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n        tabIndex=\"0\"></div>\n    );\n  }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    //sortNodesByDistance(unvisitedNodes);\n    const closestNode = getclosestNode(unvisitedNodes);\n    // If we encounter a wall, we skip it.\n    if (closestNode===null) return visitedNodesInOrder;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getclosestNode(unvisitedNodes) {\n\n  let topNode=null;\n  let mindist=Infinity;\n  for(const node of unvisitedNodes)\n  {\n    if(!node.isVisited && !node.isWall && node.distance<mindist){ mindist=node.distance; topNode=node; }\n  }\n  return topNode;\n}\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    let cost=1; if(neighbor.isWeight){ cost=15; }\n    if((node.distance+cost)<neighbor.distance)\n    { \n      neighbor.distance = node.distance + cost;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function astar(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    //sortNodesByDistance(unvisitedNodes);\n    const closestNode = getclosestNode(unvisitedNodes,finishNode);\n    // If we encounter a wall, we skip it.\n    if (closestNode===null) return visitedNodesInOrder;;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction getclosestNode(unvisitedNodes,finishNode) {\n\n  let topNode=null;\n  let mindist=Infinity,fx=finishNode.row,fy=finishNode.col;\n  for(const node of unvisitedNodes)\n  {\n    let dis=Math.abs(fx-node.row)+Math.abs(fy-node.col);\n    if(!node.isVisited && !node.isWall && (node.distance+dis)<mindist){ mindist=node.distance+dis; topNode=node; }\n  }\n  return topNode;\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    let cost=1; if(neighbor.isWeight){ cost=15; }\n    if((node.distance+cost)<neighbor.distance)\n    { \n      neighbor.distance = node.distance + cost;\n      neighbor.previousNode = node;\n    }\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the astar method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const que = []; que.push(startNode);\n\n  while (que.length>0) {\n\n    const closestNode = que.shift();\n    closestNode.isVisited = true;\n\n    if(closestNode.isWall){ continue; }\n    visitedNodesInOrder.push(closestNode);\n    \n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode,grid,que);\n    \n  }\n\n  return visitedNodesInOrder;\n}\n\nfunction updateUnvisitedNeighbors(node,grid,que) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (let neighbor of unvisitedNeighbors) {\n    neighbor.previousNode = node;  \n    neighbor.isVisited=true;  \n    que.push(neighbor);\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited );\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  startNode.isVisited = true;\n  \n  let flag = dfs_util(grid,startNode,finishNode,visitedNodesInOrder);\n  return visitedNodesInOrder;\n}\n\nfunction dfs_util(grid, startNode, finishNode,visitedNodesInOrder) {\n\n  const unvisitedNeighbors = getUnvisitedNeighbors(startNode, grid);\n\n  visitedNodesInOrder.push(startNode);\n  if (startNode === finishNode) return true;\n\n  for (let neighbor of unvisitedNeighbors) {\n    if(neighbor.isWall){ neighbor.isVisited=true; continue; }\n\n    neighbor.previousNode = startNode;  \n    neighbor.isVisited=true;   \n\n    let tmp=dfs_util(grid,neighbor,finishNode,visitedNodesInOrder);\n    if(tmp === true){ return true; }\n  }\n\n  return false;\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (row > 0) neighbors.push(grid[row - 1][col]);  \n  \n  return neighbors.filter(neighbor => neighbor.isVisited==0 );\n}\n\n","export function random_weights(width, height)\n{\n\tconst mazeNodesInOrder=[]; \n\n\tfor(let i=0; i<height; i++)\n    {\n      for(let j=0; j<width; j++)\n      {\n        if(randomIntFromInterval(0,4)===0){ mazeNodesInOrder.push([i,j])};  \n      }\n    }\n  return mazeNodesInOrder;\n}\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function bidirectional_bfs(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const que1 = []; que1.push(startNode); startNode.isVisited=1;\n  const que2 = []; que2.push(finishNode);  finishNode.isVisited=2;\n\n  while (que1.length>0 && que2.length>0) {\n\n    const closestNode1 = que1.shift();\n    const closestNode2 = que2.shift();\n    \n    visitedNodesInOrder.push(closestNode1);\n    visitedNodesInOrder.push(closestNode2);\n    \n    if (closestNode1.istargetNode) return [visitedNodesInOrder,closestNode1];\n    if (closestNode2.istargetNode) return [visitedNodesInOrder,closestNode2];\n\n    updateUnvisitedNeighbors1(closestNode1,grid,que1);\n    updateUnvisitedNeighbors2(closestNode2,grid,que2);\n\n  }\n  const tmpnode=null;\n  return [visitedNodesInOrder,tmpnode];\n}\n\nfunction updateUnvisitedNeighbors1(node,grid,que) {\n  const unvisitedNeighbors = getUnvisitedNeighbors1(node, grid);\n  for (let neighbor of unvisitedNeighbors) {\n    if(neighbor.istargetNode){ continue; }     \n    if(neighbor.isVisited === 2)\n    {\n     neighbor.istargetNode=true;\n     let tmpnode=neighbor.previousNode;\n     neighbor.prevNode2=tmpnode;\n     neighbor.previousNode=node;\n    }\n    neighbor.previousNode = node; \n    neighbor.isVisited=1;  \n    que.push(neighbor);\n  }\n}\n\nfunction updateUnvisitedNeighbors2(node,grid,que) {\n  const unvisitedNeighbors = getUnvisitedNeighbors2(node, grid);\n  for (let neighbor of unvisitedNeighbors) {\n    if(neighbor.istargetNode){ continue; }\n    \n    if(neighbor.isVisited === 1){ neighbor.prevNode2=node; neighbor.istargetNode=true; }\n    if(!neighbor.istargetNode){ neighbor.previousNode = node; } \n    neighbor.isVisited=2;  \n    que.push(neighbor);\n  }\n}\n\nfunction getUnvisitedNeighbors1(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => (neighbor.isVisited!==1 && !neighbor.isWall));\n}\n\nfunction getUnvisitedNeighbors2(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => (neighbor.isVisited!==2 && !neighbor.isWall));\n}\n\nexport function Shortest_Bidirectional_Bfs_PathOrder(midnode) {\n\n  const nodesInShortestPathOrder = [];\n  if(!midnode){ return nodesInShortestPathOrder; }\n  let currentNode = midnode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  currentNode = midnode.prevNode2;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.push(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","import React, {Component} from 'react';\nimport './modall.css';\n\nexport default class modall extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state={};\n  }\n\n  render() {    \n      return (\n        <div className=\"fk\">\n          foo\n          <button >\n            props.name\n          </button>\n        </div>\n      );\n  }\n}\n\n","import React, {Component} from 'react';\n\nexport default class sample extends Component {\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state={};\n\t}\n\n\trender() {    \n\t    return (\n\t      <div>\n\t        foo\n\t      \t<button >\n\t          Visualize abcd's Algorithm\n\t        </button>\n\t      </div>\n\t    );\n  }\n}\n\n","import React, {Component} from 'react';\nimport Node from './Node/Node.jsx';\nimport clear_Board from './Node/Node.jsx';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\nimport {astar} from '../algorithms/astar';\nimport {bfs} from '../algorithms/bfs';\nimport {dfs} from '../algorithms/dfs';\nimport {random_weights} from '../mazeAlgorithms/random_weight';\nimport {recursive_divide} from '../mazeAlgorithms/recursive_division';\nimport {stair_pattern} from '../mazeAlgorithms/stair_pattern';\nimport {bidirectional_bfs,Shortest_Bidirectional_Bfs_PathOrder} from '../algorithms/bidirectional_bfs';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport modall from '../modall/modall.jsx';\nimport sample from './sample.jsx';\nimport Navbar from 'react-bootstrap/Navbar'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\n\n\nimport './PathfindingVisualizer.css';\n\nlet START_NODE_ROW = 9;\nlet START_NODE_COL = 9;\nlet FINISH_NODE_ROW = 9;\nlet FINISH_NODE_COL = 35;\nlet NO_COL = 45,NO_ROW=19;\n\n\nexport default class PathfindingVisualizer extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: 0,\n      isW:0,\n      show:true,\n      setShow:false,\n      currentAlgoNo:0,\n      currentAlgoName:\"Visualize!\",\n      isdisable:true,\n      clearflag:0,\n    };\n    this.clearBoard = this.clearBoard.bind(this);\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n    //this.handleKeyPress = this.handleKeyPress.bind(this);\n    //this.handleKeyUp = this.handleKeyUp.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleShow = this.handleShow.bind(this);\n    \n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    let fl;\n    if(row===START_NODE_ROW && col===START_NODE_COL) \n    { fl=0; }\n    else if(row===FINISH_NODE_ROW && col===FINISH_NODE_COL)\n    {fl=1;}\n    else if(this.state.isW===1)\n    { fl=3; }\n    else { fl=2; }\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col,fl);\n    this.setState({grid: newGrid, mouseIsPressed: fl+1});\n    if(fl===0 || fl===1){ this.handleMove(); }\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.mouseIsPressed===0) return;\n    let fl=this.state.mouseIsPressed-1;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col,fl);\n    this.setState({grid: newGrid});\n    if(fl===0 || fl===1){ this.handleMove(); }\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: 0});\n  }\n\n  colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder)\n  {\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length)\n      {\n        this.colorShortestPath(nodesInShortestPathOrder);\n        return;\n      }\n        const node = visitedNodesInOrder[i];\n\n        if(node.isStart){ document.getElementById(`node-${node.row}-${node.col}`).className =\n         'node node-visited-start-simple';}\n        else if(node.isFinish){  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited-finish-simple'; }\n        else if(node.isWeight){  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited-weight-simple'; }\n        else{  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited-simple';  }      \n    }\n  }\n\n  colorShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      \n        const node = nodesInShortestPathOrder[i];\n        if(node.isStart){ document.getElementById(`node-${node.row}-${node.col}`).className =\n         'node node-shortest-path-start-simple';}\n        else if(node.isFinish){  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path-finish-simple'; }\n        else{  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path-simple';  }\n    }\n  }\n\n  animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder) {\n\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 5 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n\n        if(node.isStart){ document.getElementById(`node-${node.row}-${node.col}`).className =\n         'node node-visited-start';}\n        else if(node.isFinish){  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited-finish'; }\n        else if(node.isWeight){  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited-weight'; }\n        else{  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';  }\n      }, 5 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        if(node.isStart){ document.getElementById(`node-${node.row}-${node.col}`).className =\n         'node node-shortest-path-start';}\n        else if(node.isFinish){  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path-finish'; }\n        else{  document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';  }\n      }, 50 * i);\n    }\n  }\n\n  animateRandomMaze(nodesInMaze,flag)\n  {\n    const {grid} = this.state;\n    for (let i = 0; i < nodesInMaze.length; i++) {\n      const [x,y] = nodesInMaze[i];\n      const node=grid[x][y];\n      if(x===START_NODE_ROW && y===START_NODE_COL){ continue; }\n      if(x===FINISH_NODE_ROW && y===FINISH_NODE_COL){ continue; }\n\n      if(flag===0){  node.isWall=true;  }\n      else{  node.isWeight=true;  }\n        \n      document.getElementById(`node-${node.row}-${node.col}`).className =\n        'node node-maze-path'; \n     \n    }    \n  }\n\n  animateMazeWalls(nodesInMaze,flag) {\n    const {grid} = this.state;\n    for (let i = 0; i < nodesInMaze.length; i++) {\n      const [x,y] = nodesInMaze[i];\n      const node=grid[x][y];\n      if(x===START_NODE_ROW && y===START_NODE_COL){ continue; }\n      if(x===FINISH_NODE_ROW && y===FINISH_NODE_COL){ continue; }\n      setTimeout(() => {\n\n        if(flag===0){  node.isWall=true;  }\n        else{  node.isWeight=true;  }\n        \n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-maze-path';\n        //}\n      }, 50 * i);\n    }               \n  }\n\n  clearBoard() {\n\n    this.setState({isdisable:true});\n    const gridd=this.state.grid;\n\n    gridd[START_NODE_ROW][START_NODE_COL].isStart=false;\n    gridd[FINISH_NODE_ROW][FINISH_NODE_COL].isFinish=false;\n\n    START_NODE_ROW = 9;\n    START_NODE_COL = 9;\n    FINISH_NODE_ROW = 9;\n    FINISH_NODE_COL = 35;\n\n    gridd[START_NODE_ROW][START_NODE_COL].isStart=true;\n    gridd[FINISH_NODE_ROW][FINISH_NODE_COL].isFinish=true;    \n\n    for(let i=0; i<NO_ROW; i++)\n    {\n      for(let j=0; j<NO_COL; j++)\n      {\n\n        const tmpnode=gridd[i][j];\n\n        if(gridd[i][j].isStart )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-start'; }\n        else if(gridd[i][j].isFinish )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-finish'; }\n        else\n        {  document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node'; }\n        \n\n        gridd[i][j].distance=Infinity;\n        gridd[i][j].isVisited=0;\n        gridd[i][j].isWall=false;\n        gridd[i][j].isWeight=false;\n        gridd[i][j].istargetNode =false;\n        gridd[i][j].previousNode = null;\n        gridd[i][j].prevNode2 = null;\n  \n      }\n    }\n    this.setState({grid: gridd,clearflag:1});\n    this.setState({isdisable:false});\n  }\n\n\n\n  clearPath()\n  {\n    this.setState({isdisable:true});\n    const gridd=this.state.grid;\n\n    for(let i=0; i<NO_ROW; i++)\n    {\n      for(let j=0; j<NO_COL; j++)\n      {\n\n        const tmpnode=gridd[i][j];\n\n        if(gridd[i][j].isStart )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-start'; }\n        else if(gridd[i][j].isFinish )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-finish'; }\n        else if(gridd[i][j].isWall )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-wall'; }\n        else if(gridd[i][j].isWeight )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-weight'; }\n        else\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node'; }\n        \n\n        gridd[i][j].distance=Infinity;\n        gridd[i][j].isVisited=0;\n        gridd[i][j].istargetNode =false;\n        gridd[i][j].previousNode = null;\n        gridd[i][j].prevNode2 = null;\n  \n      }\n    }\n    this.setState({isdisable:false});\n    this.setState({clearflag:1});\n  }\n\n\n  clearWallsWeights()\n  {\n    this.setState({isdisable:true});\n    const gridd=this.state.grid;\n\n    for(let i=0; i<NO_ROW; i++)\n    {\n      for(let j=0; j<NO_COL; j++)\n      {\n\n        const tmpnode=gridd[i][j];\n\n        if(gridd[i][j].isStart )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-start'; }\n        else if(gridd[i][j].isFinish )\n        {   document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node node-finish'; }\n        else\n        {  document.getElementById(`node-${tmpnode.row}-${tmpnode.col}`).className ='node'; }\n        \n\n        gridd[i][j].distance=Infinity;\n        gridd[i][j].isVisited=0;\n        gridd[i][j].isWall=false;\n        gridd[i][j].isWeight=false;\n        gridd[i][j].istargetNode =false;\n        gridd[i][j].previousNode = null;\n        gridd[i][j].prevNode2 = null;\n\n  \n      }\n    }\n    this.setState({grid: gridd,clearflag:1});\n    this.setState({isdisable:false});\n  }\n\n  visualizeDijkstra(flag) {\n\n    this.clearPath();  \n    this.setState({isdisable:true});\n\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    if(flag === 0){ this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    else{ this.colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    this.setState({clearflag:0});\n    this.setState({isdisable:false});\n  }\n\n  visualizeDfs(flag) {\n    this.setState({isdisable:true});\n    this.clearPath();   \n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    if(flag === 0){ this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    else{ this.colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    this.setState({clearflag:0});\n    this.setState({isdisable:false});\n  }\n\n  visualizeBfs(flag) {\n    this.setState({isdisable:true});\n    this.clearPath();   \n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    if(flag === 0){ this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    else{ this.colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    this.setState({clearflag:0});\n    this.setState({isdisable:false});\n  }\n\n  visualizeAstar(flag) {\n    this.setState({isdisable:true});\n    this.clearPath();   \n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    if(flag === 0){ this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    else{ this.colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    this.setState({clearflag:0});\n    this.setState({isdisable:false});\n  }\n\n  visualizeBiderectional_bfs(flag) {\n    this.setState({isdisable:true});\n    this.clearPath();   \n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const [visitedNodesInOrder,midNode] = bidirectional_bfs(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = Shortest_Bidirectional_Bfs_PathOrder(midNode);\n    if(flag === 0){ this.animateAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    else{ this.colorAlgo(visitedNodesInOrder, nodesInShortestPathOrder); }\n    this.setState({clearflag:0});\n    this.setState({isdisable:false});\n  }\n\n  handleClose(){\n    \n    this.setState({show:false}); \n  }\n\n\n  handleShow (){\n    this.setState({show:true}); \n  }\n  \n\n  visualizeRecursive_division() {\n    this.setState({isdisable:true});\n    this.clearWallsWeights();   \n    const wid=NO_COL; const height=NO_ROW;\n\n    const mazeNodesInOrder=recursive_divide(wid,height);    \n    this.animateMazeWalls(mazeNodesInOrder,0);\n    this.setState({isdisable:false});\n  }\n\n  visualizeWall_maze() {\n    this.setState({isdisable:true});\n    this.clearWallsWeights();   \n    const wid=NO_COL; const height=NO_ROW;\n\n    const mazeNodesInOrder=random_weights(wid,height);    \n    this.animateRandomMaze(mazeNodesInOrder,0);\n    this.setState({isdisable:false});\n  }\n\n  visualizeWeight_maze() {\n    this.setState({isdisable:true});\n    this.clearWallsWeights();   \n    const wid=NO_COL; const height=NO_ROW;\n\n    const mazeNodesInOrder=random_weights(wid,height);    \n    this.animateRandomMaze(mazeNodesInOrder,1);\n    this.setState({isdisable:false});\n  }\n\n  visualizeStair_maze() {\n    this.setState({isdisable:true});\n    this.clearWallsWeights();   \n    const wid=NO_COL; const height=NO_ROW;\n\n    const mazeNodesInOrder=stair_pattern(wid,height);    \n    this.animateRandomMaze(mazeNodesInOrder,0);\n    this.setState({isdisable:false});\n  }\n\n  handleVisulize()\n  {\n    this.setState({isdisable:true});\n    const fl=this.state.currentAlgoNo;\n    if(fl===1){ this.visualizeDijkstra(0); }\n    else if(fl===2){ this.visualizeAstar(0); }\n    else if(fl===3){ this.visualizeBfs(0); }\n    else if(fl===4){ this.visualizeDfs(0); }\n    else if(fl===5){ this.visualizeBiderectional_bfs(0); }\n    else//fl===0\n    {  this.setState({currentAlgoName:\"Pick an Algorithm !\"}); }\n    this.setState({isdisable:false});\n  }\n\n  handleMove()\n  {\n    if(this.state.clearflag){ return; }\n    const fl=this.state.currentAlgoNo;\n    if(fl===1){ this.visualizeDijkstra(1); }\n    else if(fl===2){ this.visualizeAstar(1); }\n    else if(fl===3){ this.visualizeBfs(1); }\n    else if(fl===4){ this.visualizeDfs(1); }\n    else if(fl===5){ this.visualizeBiderectional_bfs(1); }\n  }\n\n  handledisable()\n  {\n    const fl=this.state.isdisable;\n    document.getElementById(\"but1\").disabled=fl;\n    document.getElementById(\"but2\").disabled=fl;\n    document.getElementById(\"but3\").disabled=fl;\n    document.getElementById(\"but4\").disabled=fl;\n    document.getElementById(\"but5\").disabled=fl;\n    document.getElementById(\"but6\").disabled=fl;\n    document.getElementById(\"but7\").disabled=fl;\n    document.getElementById(\"but8\").disabled=fl;\n    document.getElementById(\"but9\").disabled=fl;\n    document.getElementById(\"but10\").disabled=fl;\n    document.getElementById(\"but11\").disabled=fl;\n    document.getElementById(\"but12\").disabled=fl;\n  }\n\n  \n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n    const show=this.state.show;\n    //this.handledisable();   \n\n    return (\n\n      <>\n        \n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand href=\"#home\">Pathfinding-Visualizer</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n          <Navbar.Collapse id=\"responsive-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <NavDropdown className=\"inner_nav\" title=\"Algoritms\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item id=\"but1\" onClick={() => this.setState({currentAlgoNo:1,currentAlgoName:\"Visualize Dijkstra's!\"})}>\n                Dijkstra's Algorithm</NavDropdown.Item>\n                <NavDropdown.Item id=\"but2\" onClick={() => this.setState({currentAlgoNo:2,currentAlgoName:\"Visualize A*!\"})}>\n                A* Search</NavDropdown.Item>\n                <NavDropdown.Item id=\"but3\" onClick={() => this.setState({currentAlgoNo:3,currentAlgoName:\"Visualize BFS!\"})}>\n                Breadth-First Search</NavDropdown.Item>\n                <NavDropdown.Item id=\"but4\" onClick={() => this.setState({currentAlgoNo:4,currentAlgoName:\"Visualize DFS!\"})}>\n                Depth-First Search</NavDropdown.Item>\n                <NavDropdown.Item id=\"but5\" onClick={() => this.setState({currentAlgoNo:5,currentAlgoName:\"Visualize Bidirectional-BFS!\"})}>\n                Bidirectional Bfs</NavDropdown.Item>\n              </NavDropdown>\n\n              <NavDropdown title=\"Mazes & Patterns\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item id=\"but6\" onClick={() => this.visualizeRecursive_division()}>Recursive division</NavDropdown.Item>\n                <NavDropdown.Item id=\"but7\" onClick={() => this.visualizeWall_maze()}>Basic Random Maze</NavDropdown.Item>\n                <NavDropdown.Item id=\"but8\" onClick={() => this.visualizeWeight_maze()}>Basic Weight Maze</NavDropdown.Item>\n                <NavDropdown.Item id=\"but9\" onClick={() => this.visualizeStair_maze()}>Stair Pattern Maze</NavDropdown.Item>\n              </NavDropdown>\n\n              <Nav.Link id=\"but1\" onClick={() => this.handleVisulize()}>{this.state.currentAlgoName}</Nav.Link>\n\n              <NavDropdown title=\"Clear Options\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item id=\"but10\" onClick={() => this.clearBoard()}>Clear Board</NavDropdown.Item>\n                <NavDropdown.Item id=\"but11\" onClick={() => this.clearWallsWeights()}>Clear Walls and Weights</NavDropdown.Item>\n                <NavDropdown.Item id=\"but12\" onClick={() => this.clearPath()}>Clear Path</NavDropdown.Item>\n              </NavDropdown>\n              \n            </Nav>\n            <Nav>\n              <Nav.Link >Tutorial</Nav.Link>\n              <NavDropdown title=\"Walls OR Weights\" id=\"collasible-nav-dropdown\">\n                <NavDropdown.Item onClick={() => this.setState({isW:0}) }>Walls</NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.setState({isW:1}) }>Weights</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        {/*\n\n        <Button variant=\"primary\" onClick={this.handleShow}>\n        Launch demo modal\n        </Button>\n        \n        <Modal show={this.state.show} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Modal heading</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" onClick={this.handleClose}>\n              Save Changes\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      */}\n\n\n        <div className=\"grid\" >\n\n          {grid.map((row, rowIdx) => {\n            return (\n\n              <div key={rowIdx} >\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall,isWeight} = node;\n                  return (\n\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      isWeight={isWeight}\n                      mouseIsPressed={mouseIsPressed}\n                      onKeyDown={this.handleKeyPress}\n                      onKeyUp={this.handleKeyUp} \n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < NO_ROW; row++) {\n    const currentRow = [];\n    for (let col = 0; col < NO_COL; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: 0,\n    isWall: false,\n    isWeight:false,\n    istargetNode:false,\n    previousNode: null,\n    prevNode2: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col,fl) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n  };\n  if(fl===0)\n  {\n    newGrid[START_NODE_ROW][START_NODE_COL].isStart=false;\n    newNode.isStart = true;\n    START_NODE_ROW=row; START_NODE_COL=col;\n  }\n  else if(fl===1)\n  {\n    newGrid[FINISH_NODE_ROW][FINISH_NODE_COL].isFinish=false;\n    newNode.isFinish = true;\n    FINISH_NODE_ROW=row; FINISH_NODE_COL=col;\n  }\n  else if(fl===2)\n  { \n    newNode.isWall = !node.isWall;  \n  }\n  else if(fl===3)\n  {\n    newNode.isWeight = !node.isWeight;\n  }\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithNoVisited = (grid) => {\n  const newGrid = getInitialGrid();\n  for(let i=0; i<NO_ROW; i++)\n  {\n    for(let j=0; j<NO_COL; j++)\n    {\n      const node = newGrid[i][j];\n\n      if(grid[i][j].isStart )\n      {   document.getElementById(`node-${node.row}-${node.col}`).className ='node node-start'; }\n      else if(grid[i][j].isFinish )\n      {   document.getElementById(`node-${node.row}-${node.col}`).className ='node node-finish'; }\n      else if(grid[i][j].isVisited && !grid[i][j].isWall )\n      {   document.getElementById(`node-${node.row}-${node.col}`).className ='node node'; }\n    \n\n      const newNode = {\n        ...node,\n        iswall: grid[i][j].isWall,\n      };\n      newGrid[i][j] = newNode;\n    }\n  }\n  return newGrid;\n};","export function stair_pattern(width, height)\n{\n\tconst mazeNodesInOrder=[]; \n\tlet i=height-1,j=0;\n\n\twhile(i>=0)\n\t{\n\t\tmazeNodesInOrder.push([i,j]);\n\t\ti--; j++;\n\t}\n\n\ti++; j--;\n\twhile(i<height-1)\n\t{\n\t\tmazeNodesInOrder.push([i,j]);\n\t\ti++; j++;\n\t}\n\n\ti--; j--;\n\twhile(i>=2 && j<=width-2)\n\t{\n\t\tmazeNodesInOrder.push([i,j]);\n\t\ti--; j++;\n\t}\n\n    return mazeNodesInOrder;\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer.jsx';\nimport sample from './PathfindingVisualizer/sample';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n/*import Navbar from 'react-bootstrap/Navbar'\nimport NavDropdown from 'react-bootstrap/NavDropdown'\nimport Nav from 'react-bootstrap/Nav'\n*/\n\nfunction App() {\n  return (\n  \t//<div>\n  \t/*<div className=\"App\">\n  \t\t<modall> </modall>\n  \t</div>*/\n\n    <div className=\"App\">\n      <PathfindingVisualizer> </PathfindingVisualizer>\n    </div>\n    //</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport sample from './PathfindingVisualizer/sample';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}